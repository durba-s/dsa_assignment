#include <stdio.h>
#define max 1000
struct pt{
    int ind;
    int x;
    int y;
    int nor;
};
void heapify(struct pt *array, int size, int i) {
   if (size >1) {
    
    int smallest = i;
    int l = ((2 * i) + 1);
    int r = ((2 * i) + 2);
    if (l < size && array[l].nor < array[smallest].nor)
      smallest = l;
    if (r < size && array[r].nor<array[smallest].nor)
      smallest = r;
    if(l < size && array[l].nor == array[smallest].nor ){
        if(array[l].ind < array[smallest].ind) smallest = l;
    }
    if(r < size && array[r].nor == array[smallest].nor ){
        if(array[r].ind < array[smallest].ind) smallest = r;
        
        
    }
    if (smallest != i) {
        struct pt temp=array[i];
        array[i]=array[smallest];
        array[smallest]=temp;
      heapify(array, size, smallest);
    }
  }
}
void buildminheap(struct pt* array,int n) {
    int startIdx = (n / 2) - 1; 

    for (int i = startIdx; i >= 0; i--) { 
        heapify(array, n, i); 
    } 
}
int main()
{
    int n,c,d,k;
    scanf("%d",&n);
    scanf("%d",&c);
    scanf("%d",&d);
    scanf("%d",&k);
    int nx[max]={0};
    int ny[max]={0};
    struct pt arr[n];
    for(int i=0;i<n;i++){
        double n1,n2;
        scanf("%lf",&n1);
        scanf("%lf",&n2);
        int na=(int)n1;
        int nb=(int)n2;
        arr[i].x=na;
        arr[i].y=nb;
        arr[i].ind=i;
        nx[na]+=1;
        ny[nb]+=1;
    }
    for(int i=0;i<n;i++){
        arr[i].nor=nx[arr[i].x]*ny[arr[i].y];
    }
    buildminheap(arr,n);
    for(int i=0;i<k;i++){
        printf("%d ",arr[0].ind);
        struct pt temp=arr[0];
        arr[0]=arr[n-i-1];
        arr[n-i-1]=arr[0];
        heapify(arr,n-i-1,0);

    }
    return 0;
}
