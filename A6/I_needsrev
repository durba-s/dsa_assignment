#include <stdio.h>
struct pt{
    int ind;
    int x;
    int y;
};
struct pt am;
int quad(struct pt p){
    if(p.y == 0) {
        if(p.x > 0) return 1;
        else if(p.y==0) return 10;
        else return 5;
    } 
    else if(p.y > 0) {
        if(p.x > 0) return 2;
        else if(p.x == 0) return 3;
        else return 4;
    } 
    else {
        if(p.x < 0) return 6;
        else if(p.x == 0) return 7;
        else return 8;
    }
}
double slope(struct pt p){
    return ((double)p.y)/((double)p.x);
}
int dist(struct pt x1,struct pt x2){
    int x=x1.x>x2.x?x1.x-x2.x:x2.x-x1.x;
    int y=x1.y>x2.y?x1.y-x2.y:x2.y-x1.y;
    return x+y;
}
int cmp(struct pt x1,struct pt x2){
    if(quad(x1)<quad(x2))   return 1;
    else if(quad(x1)==quad(x2)){
        if(slope(x1)<slope(x2) ) return 1;
        else if(slope(x1)==slope(x2)){
            if(dist(x1,am)<dist(x2,am))   return 1;
        }
    }
    return 0;
}
void heapify(struct pt *array, int size, int i) {
   if (size >1) {
    
    int smallest = i;
    int l = ((2 * i) + 1);
    int r = ((2 * i) + 2);
    if (l < size && cmp(array[l] ,array[smallest])==1)
      smallest = l;
    if (r < size && cmp(array[r] ,array[smallest])==1)
      smallest = r;
    if (smallest != i) {
        struct pt temp=array[i];
        array[i]=array[smallest];
        array[smallest]=temp;
      heapify(array, size, smallest);
    }
  }
}
void buildminheap(struct pt* array,int n) {
    int startIdx = (n / 2) - 1; 

    for (int i = startIdx; i >= 0; i--) { 
        heapify(array, n, i); 
    } 
}
int main()
{
    int n;
    scanf("%d",&n);
    struct pt arr[n];
    int min=0;
    int miny=1000000;
    for(int i=0;i<n;i++){
        int n1,n2,n3;
        scanf("%d",&n3);
        scanf("%d",&n1);
        scanf("%d",&n2);
        arr[i].x=n1;
        arr[i].y=n2;
        arr[i].ind=n3;
        if(arr[i].y<miny){
            min=i;
            miny=arr[i].y;
        }    
        
    }
    am=arr[min];
    for(int i=0;i<n;i++){
        arr[i].x=arr[i].x-am.x;
        arr[i].y=arr[i].x-am.y;
    }
    buildminheap(arr,n);
    for(int i=0;i<n;i++){
        if(arr[0].ind!=am.ind)
            printf("%d ",arr[0].ind);
        struct pt temp=arr[0];
        arr[0]=arr[n-i-1];
        arr[n-i-1]=arr[0];
        heapify(arr,n-i-1,0);

    }
    return 0;
}









////
#include <stdio.h>
#include <stdlib.h>

int minindex;
int minx;
int miny=500000000;
void copyelement(int a[][3], int b[][3], int i, int j){
    a[i][0]=b[j][0];
    a[i][1]=b[j][1];
    a[i][2]=b[j][2];
}
int mod(int n){
    if(n<0) return -1*n;
    return n;
}
//returns quadrant of the point
int q(int x, int y){
    if(x>0 && y>=0) return 1;
    if(x<=0 && y>0) return 2;
    if(x<0 && y<=0) return 3;
    return 4;
}
float slope(int x, int y){
    return (float)y/(float)x;
}
//special merge sort to sort points on the basis of quadrant and slopes
void merge(int a[][3], int l, int m, int r){
    int nl=m-l+1;
    int nr=r-m;
    int i;
    int left[nl][3], right[nr][3];
    for(i=0;i<nl;i++){
        copyelement(left,a,i,l+i);
    }
    for(i=0;i<nr;i++){
        copyelement(right,a,i,m+i+1);
    }
    i=0;
    int j=0, k=l, ql, qr;
    while(i<nl && j<nr){
        ql=q(left[i][1],left[i][2]);
        qr=q(right[j][1],right[j][2]);
        if(ql<qr){
            copyelement(a,left,k,i);
            i++;
        }
        else if(qr<ql){
            copyelement(a,right,k,j);
            j++;
        }
        else{
            float sl=slope(left[i][1],left[i][2]);
            float sr=slope(right[j][1],right[j][2]);
            if(sl<sr){
                copyelement(a,left,k,i);
                i++;
            }
            else if(sr<sl){
                copyelement(a,right,k,j);
                j++;
            }
            else{
                //choosing the one with the closer manhattan distance
                int ml=abs(left[i][1])+abs(left[i][2]);
                int mr=abs(right[j][1])+abs(right[j][2]);
                if(ml<mr){
                    copyelement(a,left,k,i);
                    i++;
                }
                else{
                    copyelement(a,right,k,j);
                    j++;
                }
            }
        }
        k++;
    }
    //insert leftover elements
    while(i<nl){
        copyelement(a,left,k,i);
        i++;
        k++;
    }
    while(j<nr){
        copyelement(a,right,k,j);
        j++;
    }
}

void partition(int a[][3], int l, int r){
    if(l>=r) return;
    int m= (l+r)/2;
    partition(a,l,m);
    partition(a,m+1,r);
    merge(a,l,m,r);
}

int main()
{
    int n,i;
    scanf("%d",&n);
    int a[n][3],b[n-1][3];
    for(i=0;i<n;i++){
        scanf("%d %d %d",&a[i][0],&a[i][1],&a[i][2]);
        if(a[i][2]<miny){
            minindex=a[i][0];
            miny=a[i][2];
            minx=a[i][1];
        }
    }
    int j=0;
    for(i=0;i<n;i++){
        if(a[i][0]!=minindex){
            b[j][0]=a[i][0];
            b[j][1]=a[i][1]-minx;
            b[j][2]=a[i][2]-miny;
            j++;
        }
    }
    partition(b,0,n-2);
    for(i=0;i<n-1;i++){
        printf("%d", b[i][0]);
        if(i!=n-2) printf(" ");
    }
    return 0;
}
